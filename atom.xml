<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WeirdoPho</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-12T04:19:53.433Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WeirdoPho</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线上部署代码</title>
    <link href="http://yoursite.com/2019/02/12/%E7%BA%BF%E4%B8%8A%E9%83%A8%E7%BD%B2%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/02/12/线上部署代码/</id>
    <published>2019-02-12T04:13:15.000Z</published>
    <updated>2019-02-12T04:19:53.433Z</updated>
    
    <content type="html"><![CDATA[<p>将代码部署到线上</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章主要讲解<code>如何将已写好的项目部署到线上</code></p><p>涉及到的技术栈：<code>koa、vue、vue-cli、mongo、pm2、nginx</code></p><p>总体思路：将代码上传到gitHub上，每次修改完成上传后，服务器端只需要拉去代码，并执行压缩等操作，部署到线上。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h3><p>这里的配置主要涉及到判断是否是线上从而来确定接口地址</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = process.env.NODE_ENV == <span class="string">'development'</span> ? <span class="string">'http://localhost:3000'</span> : <span class="string">'/api'</span>;</span><br></pre></td></tr></table></figure><p>线上接口带上<code>api</code>,从而区分地址打开的是页面还是接口</p><h3 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h3><p>这里的配置主要是改成连接线上数据库</p><p>原始：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> Monk(<span class="string">"localhost:27017/games"</span>); <span class="comment">//链接到库</span></span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> Monk(<span class="string">"你的域名/games"</span>); <span class="comment">//链接到库</span></span><br></pre></td></tr></table></figure><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a><a name="nginx">nginx配置</a></h3><p>代码如下：</p><p>前端页面：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>   /home/website/koa-vue-mongodb/front/dist;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口配置：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /api &#123;</span><br><span class="line">     <span class="attribute">rewrite</span> <span class="regexp"> ^/api/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">     <span class="attribute">proxy_pass</span>   http://127.0.0.1:3000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单说明：将接口<code>/api/getData</code>实际指向<code>http://127.0.0.1:3000/getData</code></p><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><ol><li>本地代码上传到GitHub上</li><li>服务器在home文件夹下新建website文件夹并打开</li><li>克隆项目到此文件夹</li><li>前后端分别执行<code>npm install</code>,安装必要文件</li><li>进入后端代码，执行<code>pm2 start app.js --watch -f</code>,来保证服务一直开启,首次不需要加<code>-f</code></li><li>进入前端代码，执行<code>node build/build.js</code>,打包代码</li><li>配置nginx,写入上述 <a href="#nginx">nginx配置</a> ,首页指向前端打包后的代码</li><li>打开你的网址，便能看到结果</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将代码部署到线上&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="线上部署" scheme="http://yoursite.com/tags/%E7%BA%BF%E4%B8%8A%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>在服务器上安装mongoDB</title>
    <link href="http://yoursite.com/2019/01/30/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85mongoDB/"/>
    <id>http://yoursite.com/2019/01/30/在服务器上安装mongoDB/</id>
    <published>2019-01-30T08:40:39.000Z</published>
    <updated>2019-01-30T08:42:15.439Z</updated>
    
    <content type="html"><![CDATA[<p>在系统为centos6 64bit的服务器上搭建mongoDB</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repos.d/mongodb-org-3.4.repo</span><br></pre></td></tr></table></figure><p>然后写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.4]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</span><br></pre></td></tr></table></figure></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mongodb-org</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/mongod.conf</span><br></pre></td></tr></table></figure><p>修改127.0.0.1为<code>0.0.0.0</code>，使得所有机器可连</p><h3 id="mongo相关操作"><a href="#mongo相关操作" class="headerlink" title="mongo相关操作"></a>mongo相关操作</h3><ul><li>启动：service mongod start</li><li>停止：service mongod stop</li><li>重启：service mongod restart</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在系统为centos6 64bit的服务器上搭建mongoDB&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="mongoDB" scheme="http://yoursite.com/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>nginx搭建图片静态服务器</title>
    <link href="http://yoursite.com/2019/01/30/nginx%E6%90%AD%E5%BB%BA%E5%9B%BE%E7%89%87%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2019/01/30/nginx搭建图片静态服务器/</id>
    <published>2019-01-30T08:04:13.000Z</published>
    <updated>2019-02-12T04:16:25.821Z</updated>
    
    <content type="html"><![CDATA[<p>在系统为centos6 64bit的服务器上搭建nginx</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d</span><br><span class="line">vi nginx.repo</span><br></pre></td></tr></table></figure><h4 id="输入如下配置"><a href="#输入如下配置" class="headerlink" title="输入如下配置"></a>输入如下配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line"><span class="attribute">name</span> = nginx repo</span><br><span class="line">baseurl = http://nginx.org/packages/centos/6/<span class="variable">$basearch</span></span><br><span class="line">gpgcheck = <span class="number">0</span></span><br><span class="line">enabled = <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>nginx启动：<code>service nginx start</code></p><p>nginx停止：<code>service nginx stop</code></p><p>查看状态：<code>service nginx status</code></p><h3 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h3><h4 id="开启端口"><a href="#开启端口" class="headerlink" title="开启端口"></a>开启端口</h4><p><code>iptables -A INPUT -p tcp --dport 8080 -j ACCEPT</code></p><h4 id="保存并重启防火墙"><a href="#保存并重启防火墙" class="headerlink" title="保存并重启防火墙"></a>保存并重启防火墙</h4><p><code>/etc/rc.d/init.d/iptables save</code></p><p><code>/etc/init.d/iptables restart</code></p><h4 id="打开49152-65534之间的端口"><a href="#打开49152-65534之间的端口" class="headerlink" title="打开49152~65534之间的端口"></a>打开49152~65534之间的端口</h4><p><code>iptables -A INPUT -p tcp --dport 49152:65534 -j ACCEPT</code></p><h4 id="保存修改后重启防火墙"><a href="#保存修改后重启防火墙" class="headerlink" title="保存修改后重启防火墙"></a>保存修改后重启防火墙</h4><p><code>service iptables restart</code></p><h3 id="访问配置"><a href="#访问配置" class="headerlink" title="访问配置"></a>访问配置</h3><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p>创建用户：<code>user add hexo</code></p><p>设置密码：<code>passwd hexo</code><br>然后输入密码，并确认密码</p><p>结果：在home文件夹下就会生成mfx文件夹</p><h4 id="创建静态资源文件夹"><a href="#创建静态资源文件夹" class="headerlink" title="创建静态资源文件夹"></a>创建静态资源文件夹</h4><p>切换到hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir www</span><br><span class="line">mkdir images</span><br></pre></td></tr></table></figure></p><p>修改下文件夹权限</p><p>chmod 777 hexo -R</p><p>数字7不多做解释，表示r(4:读) w(2:写) x(1:执行)</p><h4 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h4><p><img src="http://www.mfx55.top/images/WX20190130-144248%402x.png" alt="图片说明"></p><p>写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /images/ &#123;</span><br><span class="line">    root /home/hexo/www;</span><br><span class="line">    autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明：</p><p><code>/images/</code>：访问地址，配置后访问地址为 mfx55.top/images</p><p><code>root /home/hexo/www;</code>：具体访问的路径，如访问mfx55.top/images/index.html 则是访问服务器的 /home/hexo/www/images/index.html</p><p><code>autoindex on;</code>：让你可以浏览这个资源</p><p>然后执行 <code>nginx -s reload</code></p><p>在/home/www/images/下创建index.html，便可以访问了 <a href="www.mfx55.top/images/index.html">www.mfx55.top/images/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在系统为centos6 64bit的服务器上搭建nginx&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>保存图片</title>
    <link href="http://yoursite.com/2018/11/20/%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2018/11/20/保存图片/</id>
    <published>2018-11-20T09:00:38.000Z</published>
    <updated>2018-11-20T09:11:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>小程序保存图片的示意代码</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><p>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">canvas-id</span>=<span class="string">"myCanvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>JS:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">handleDraw() &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = wx.createCanvasContext(<span class="string">"myCanvas"</span>);</span><br><span class="line">    </span><br><span class="line">    ctx.save();</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">    ctx.restore();</span><br><span class="line">    </span><br><span class="line">    ctx.draw();</span><br><span class="line">&#125;</span><br><span class="line">draw() &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.handleDraw();</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        wx.canvasToTempFilePath(&#123;</span><br><span class="line">            canvasId: <span class="string">"myCanvas"</span>,</span><br><span class="line">            success(res)&#123;</span><br><span class="line">                <span class="keyword">const</span> tempFilePath = res.tempFilePath;</span><br><span class="line">                self.setData(&#123;</span><br><span class="line">                    camvasImg: tempFilePath</span><br><span class="line">                &#125;);</span><br><span class="line">                self.saveImg(tempFilePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,<span class="number">300</span>)</span><br><span class="line">&#125;</span><br><span class="line">saveImg(path) &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span>(self.data.saving) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    self.setData(&#123;</span><br><span class="line">        saving: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">        title: <span class="string">"保存中"</span></span><br><span class="line">    &#125;)</span><br><span class="line">    wx.getSetting(&#123;</span><br><span class="line">        success(res) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!res.authSetting[<span class="string">"scope.writePhotosAlbum"</span>]) &#123;</span><br><span class="line">                wx.authorize(&#123;</span><br><span class="line">                    scope: <span class="string">"scope.writePhotosAlbum"</span>,</span><br><span class="line">                    success()&#123;</span><br><span class="line">                        self.saveImageToPhotoAlbum(path);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                self.saveImageToPhotoAlbum(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        fail(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            wx.hideLoading();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">saveImageToPhotoAlbum(path)&#123;</span><br><span class="line">    wx.saveImageToPhotoAlbum(&#123;</span><br><span class="line">        filePath: path,</span><br><span class="line">        success(res)&#123;</span><br><span class="line">            wx.hideLoading()</span><br><span class="line">            self.setData(&#123;</span><br><span class="line">                saving: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">                title: <span class="string">"保存成功"</span>,</span><br><span class="line">                icon:<span class="string">"success"</span>,</span><br><span class="line">                duration:<span class="number">2000</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装微信api</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> <span class="keyword">from</span> <span class="string">"../util/es6-promise"</span></span><br><span class="line"><span class="keyword">const</span> wxGetImageInfo = <span class="function">(<span class="params">url</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        wx.getImageInfo(&#123;</span><br><span class="line">            src: url,</span><br><span class="line">            success: resolve,</span><br><span class="line">            fail: reject</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    wxGetImageInfo: wxGetImageInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h2><ul><li>关于文字y坐标位置，应该是测量的位置（sketch）加上字的大小，即 <code>ctx.fillText(&quot;测试文字&quot;,x轴位置,测量的y轴的位置加上字的大小)</code></li><li>居中问题，首先说下canvas的居中原理，设置<code>ctx.setTextAlign(&#39;center&#39;)</code>后，绘制文字从文字中间开始，向两边散开。所以绘制文字的X轴，需要根据绘制区域的宽度来定，如：画布宽度为360，绘制的时候应该写<code>ctx.fillText(&quot;测试文字&quot;,180,y轴位置)</code></li><li>文字裁剪<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据文字个数裁剪</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">"也许你不会懂，自从你说爱我以后，我的天空，星星都亮了。"</span></span><br><span class="line"><span class="keyword">const</span> txtLen = txt.length;</span><br><span class="line"><span class="keyword">const</span> limitLen =  <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(txtLen &gt;= limitLen)&#123;</span><br><span class="line">    txt = txt.substring(<span class="number">0</span>,limitLen)+<span class="string">"..."</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.save();</span><br><span class="line">ctx.fillText(txt,<span class="number">180</span>,<span class="number">0</span>);</span><br><span class="line">ctx.restore();</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据文字宽度裁剪</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"你就像一团雾，而我在其中迷了路。"</span>;</span><br><span class="line"><span class="keyword">const</span> lineWidth = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> textAreaWidth = <span class="number">180</span>; <span class="comment">//文字区域的宽度</span></span><br><span class="line"><span class="keyword">const</span> initHeight = <span class="number">82</span>; <span class="comment">//绘制文字距离canvas顶部初始的高度</span></span><br><span class="line"><span class="keyword">const</span> lastSubStrIndex = <span class="number">0</span>; <span class="comment">//每次开始截取的字符串的索引</span></span><br><span class="line"><span class="keyword">const</span> fontSize = <span class="number">26</span>;</span><br><span class="line">ctx.save();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.setFontSize(fontSize);</span><br><span class="line">ctx.setFillStyle(<span class="string">"#222"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>,len = str.length;i&lt;len;i++)&#123;</span><br><span class="line">    lineWidth += ctx.measureText(str[i]).width;</span><br><span class="line">    <span class="keyword">if</span>(lineWidth &gt; textAreaWidth)&#123;</span><br><span class="line">        ctx.fillText(str.substring(lastSubStrIndex,i),<span class="number">270</span>,initHeight);</span><br><span class="line">        initHeight += fontSize;</span><br><span class="line">        lineWidth = <span class="number">0</span>;</span><br><span class="line">        lastSubStrIndex = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i == str.length - <span class="number">1</span>)&#123;</span><br><span class="line">        ctx.fillText(str.substring(lastSubStrIndex,i+<span class="number">1</span>),<span class="number">270</span>,initHeight+<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.restore();</span><br></pre></td></tr></table></figure><h2 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h2><p>写在前面：如果绘制接口传过来的图片，需要调用微信提供的API<code>（getImageInfo）</code>转换成本地缓存的图片，才能绘制。</p><ul><li><p>绘制圆形图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> centerPoint = <span class="number">160</span>;</span><br><span class="line"><span class="comment">// 图片距离顶部的高度</span></span><br><span class="line"><span class="keyword">const</span> topHeight = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> r = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">ctx.save();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(centerPoint, topHeight + r, r, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.clip();</span><br><span class="line">ctx.drawImage(imgPath, centerPoint - r, topHeight, <span class="number">2</span>*r, <span class="number">2</span>*r);</span><br><span class="line">ctx restore();</span><br></pre></td></tr></table></figure></li><li><p>绘制多张接口图片</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aImg = wxGetImageInfo(data.a);</span><br><span class="line"><span class="keyword">const</span> bImg = wxGetImageInfo(data.b);</span><br><span class="line"><span class="keyword">const</span> cImg = wxGetImageInfo(data.c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([aImg,bImg,cImg]).then(<span class="function">(<span class="params">[a,b,c]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 下面仅为示意代码</span></span><br><span class="line">    ctx.drawImage(a.path, centerPoint - r, topHeight, <span class="number">2</span>*r, <span class="number">2</span>*r);</span><br><span class="line">    ctx.drawImage(b.path, centerPoint - r, topHeight, <span class="number">2</span>*r, <span class="number">2</span>*r);</span><br><span class="line">    ctx.drawImage(c.path, centerPoint - r, topHeight, <span class="number">2</span>*r, <span class="number">2</span>*r);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ctx.draw();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小程序保存图片的示意代码&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="保存图片" scheme="http://yoursite.com/tags/%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>镜头知识</title>
    <link href="http://yoursite.com/2018/11/18/%E9%95%9C%E5%A4%B4%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/11/18/镜头知识/</id>
    <published>2018-11-18T09:29:59.000Z</published>
    <updated>2018-11-18T09:31:35.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>生命诚可贵，代码价更高，若为摄影故，两者皆可抛。</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h1 id="镜头"><a href="#镜头" class="headerlink" title="镜头"></a>镜头</h1><h2 id="焦距"><a href="#焦距" class="headerlink" title="焦距"></a>焦距</h2><ul><li>焦距越长，看的距离越远，范围越小</li><li>焦距越短，看的距离越近，范围越大，也叫<code>广角镜头</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;生命诚可贵，代码价更高，若为摄影故，两者皆可抛。&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="摄影" scheme="http://yoursite.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="摄影" scheme="http://yoursite.com/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>相机模式</title>
    <link href="http://yoursite.com/2018/11/18/%E7%9B%B8%E6%9C%BA%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/18/相机模式/</id>
    <published>2018-11-18T09:28:54.000Z</published>
    <updated>2018-11-18T10:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>生命诚可贵，代码价更高，若为摄影故，两者皆可抛。</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h1 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h1><h2 id="全自动模式（Auto）"><a href="#全自动模式（Auto）" class="headerlink" title="全自动模式（Auto）"></a>全自动模式（Auto）</h2><p>相机控制项：</p><ul><li>快门速度</li><li>光圈</li><li>ISO</li><li>白平衡</li><li>对焦模式</li><li>曝光补偿</li><li>焦点</li><li>测光补偿</li><li>闪光曝光补偿过弹出式闪光灯</li></ul><p>你可控项：</p><ul><li>选择RAW或JPEG</li><li>连拍还是单拍</li></ul><p>备注：</p><ul><li>全自动模式不允许你按照你自己的意愿去更改测光模式，所以会导致某些区域过亮或过暗</li></ul><h2 id="程序模式（P）"><a href="#程序模式（P）" class="headerlink" title="程序模式（P）"></a>程序模式（P）</h2><p>相机控制项：</p><ul><li>快门速度</li><li>光圈</li></ul><p>你可控项：</p><ul><li>ISO</li><li>白平衡</li><li>对焦模式</li><li>曝光补偿</li><li>焦点</li><li>测光模式</li><li>闪光曝光补偿或弹出式闪光灯</li><li>选择RAW还是JPRG</li><li>连拍还是单拍</li></ul><p>备注：</p><ul><li>光照不是很好时，容易出错</li></ul><h2 id="光圈优先模式-（A-AV）"><a href="#光圈优先模式-（A-AV）" class="headerlink" title="光圈优先模式 （A/AV）"></a>光圈优先模式 （A/AV）</h2><p>相机控制项：</p><p>-快门速度</p><p>你可控项：</p><ul><li>光圈</li><li>ISO</li><li>白平衡</li><li>对焦模式</li><li>曝光补偿</li><li>焦点</li><li>测光模式</li><li>闪光曝光或弹出式闪光灯</li><li>选择RAW或者JPEG</li><li>连拍或单拍</li></ul><p>备注：</p><ul><li>这是种常用模式</li><li>他可以让你更专注于景深上，从而创造出更好的虚化</li><li>光线比较暗的情况下，可以在不产生过多的噪点的前提下调高ISO值</li></ul><h2 id="快门优先模式（S-TV）"><a href="#快门优先模式（S-TV）" class="headerlink" title="快门优先模式（S/TV）"></a>快门优先模式（S/TV）</h2><p>相机控制项：</p><ul><li>光圈</li></ul><p>你可控项：</p><ul><li>快门速度</li><li>ISO</li><li>白平衡</li><li>对焦模式</li><li>曝光补偿</li><li>焦点</li><li>测光模式</li><li>闪光曝光补偿或弹出式闪光灯</li><li>选择RAW或JPEG</li><li>连拍或单拍</li></ul><p>备注：</p><ul><li>适合拍摄快速移动的物体或者长时间曝光的</li></ul><h1 id="手动模式（M）"><a href="#手动模式（M）" class="headerlink" title="手动模式（M）"></a>手动模式（M）</h1><p><code>你可以控制所有东西！你可以控制所有东西！！你可以控制多有东西！！！</code></p><p>备注：</p><ul><li>在使用闪光灯时候会用到</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;生命诚可贵，代码价更高，若为摄影故，两者皆可抛。&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="摄影" scheme="http://yoursite.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="摄影" scheme="http://yoursite.com/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>相机三要素</title>
    <link href="http://yoursite.com/2018/11/18/%E7%9B%B8%E6%9C%BA%E4%B8%89%E8%A6%81%E7%B4%A0/"/>
    <id>http://yoursite.com/2018/11/18/相机三要素/</id>
    <published>2018-11-18T06:17:31.000Z</published>
    <updated>2018-11-18T09:31:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>生命诚可贵，代码价更高，若为摄影故，两者皆可抛。</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h1 id="相机三要素"><a href="#相机三要素" class="headerlink" title="相机三要素"></a>相机三要素</h1><h2 id="快门"><a href="#快门" class="headerlink" title="快门"></a>快门</h2><ul><li>快门打开的时间长短，也就是 <code>曝光时长</code></li><li>正常：1/125s</li><li>快门时间短的话会导致图片变暗，时间太长也会导致图片太白</li></ul><h2 id="光圈"><a href="#光圈" class="headerlink" title="光圈"></a>光圈</h2><ul><li>控制透光量</li><li>光圈越小，远处和近处的景物都会很清晰，叫做<code>景深广</code>。适用于拍摄风景等大场面</li><li>光圈越大，对焦位置清晰，其他远处和近处的景物都会很清晰，叫做<code>景深浅</code>。适用于突出某个景物，适合拍人像</li></ul><h2 id="感光度（ISO）"><a href="#感光度（ISO）" class="headerlink" title="感光度（ISO）"></a>感光度（ISO）</h2><ul><li>感光材料对光线的敏感程度</li><li>数值越大，对光线越敏感</li><li>很大的时候会产生噪点</li></ul><p>基础对话<br>A:我想抓拍一瞬间的动作<br>B:把快门调到最快<br>A:可是这样透光量不够了，照片太暗<br>B:那么把光圈调大点<br>A:可是我想整个画面清楚，不能用大光圈<br>B:那就把ISO调大点<br>A:但是这样又会出现噪点了<br>B:那就去户外阳光明媚的地方拍照<br>A:可我只能在光线不好的地方拍<br>B:无语..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生命诚可贵，代码价更高，若为摄影故，两者皆可抛。&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="摄影" scheme="http://yoursite.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="摄影" scheme="http://yoursite.com/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>vue基础</title>
    <link href="http://yoursite.com/2018/04/20/vue%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/04/20/vue基础/</id>
    <published>2018-04-19T16:00:00.000Z</published>
    <updated>2018-04-20T09:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>练习vue的demo</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><p><img src="https://user-gold-cdn.xitu.io/2018/3/22/1624d161ef404156?imageslim" alt="image"></p><p>注: 本文中采用的是es5写法</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>方式一：CDN引入，<script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"></script></p></li><li><p>方式二：NPM安装，$ npm install vue</p></li></ul><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener">传送门</a></p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020110.png" alt="image"></p><ul><li>视图（View）：用户界面。</li><li>控制器（Controller）：业务逻辑</li><li>模型（Model）：数据保存</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="image"></p><ul><li>beforeCreate:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">el     : undefined</span><br><span class="line">data   : undefined</span><br><span class="line">message: undefined</span><br></pre></td></tr></table></figure><ul><li>created:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">el     : undefined</span><br><span class="line">data   : [object Object]</span><br><span class="line">message: hi</span><br></pre></td></tr></table></figure><ul><li>beforeMount:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">el     : [object HTMLDivElement]</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">data   : [object Object]</span><br><span class="line">message: hi</span><br></pre></td></tr></table></figure><ul><li>mounted:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">el     : [object HTMLDivElement]</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;p&gt;hi&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">data   : [object Object]</span><br><span class="line">message: hi</span><br></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>文本</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>文本: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"elId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--简易写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">"elId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>js处理</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; Math.abs(-7) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>显示隐藏</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--if 方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"see"</span>&gt;</span>你能看到俺不<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--show 方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"see"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>template 标签不能使用 v-show</p></blockquote><ul><li>点击</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"eventHandle"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--简易方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"eventHandle"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><ul><li>计算属性 computed</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg: <span class="string">'😁😑'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        addText: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.msg+<span class="string">'啊哈哈'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        changeVal()&#123;</span><br><span class="line">            <span class="keyword">this</span>.msg = <span class="keyword">this</span>.msg+<span class="string">'啊呵呵'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;addText&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeVal"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>官方解释：计算属性是基于它们的依赖进行缓存的</p></blockquote><p>这句话也就随之挖了个大坑，看下面代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        list: [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        listVal: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.list[<span class="number">1</span>]+<span class="string">'字母'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        notChangeVal: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.list[<span class="number">1</span>] = <span class="string">'bb'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;list&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;listVal&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"notChangeVal"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击按钮，会发现listVal的值不会随着点击而改变。（马萨嘎😓）</p><p>修改代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">notChangeVal: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$set(<span class="keyword">this</span>.list, <span class="number">1</span>, <span class="string">'bb'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次点击按钮，会发现listVal的值会随着点击而改变。 ）</p><ul><li>侦听器 watch</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input-box"</span> <span class="attr">v-model</span>=<span class="string">"val"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>添加后缀：&#123;&#123;result&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        val: <span class="string">''</span>, </span><br><span class="line">        result: <span class="string">''</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        val: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.result = <span class="keyword">this</span>.val + <span class="string">'@qimai.cn'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>区别</code></p><p>主要体现在使用场合上的不同</p><blockquote><p>计算属性：适合处理一些简单的计算。如切割字符串，整理数组，数字加减乘除等。</p></blockquote><blockquote><p>侦听器：适合进行一些相关的复杂操作。如用一个变量去获取后台数据，侦听这个变量的变化，去进行一些相关方法计算。</p></blockquote><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><ul><li>对象语法</li></ul><p>方式一：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'active': isActive,'error': isError&#125;"</span>&gt;</span>测试文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"clickHandle()"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.error</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        isActive: <span class="literal">true</span>,</span><br><span class="line">        isError: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        clickHandle()&#123;</span><br><span class="line">            <span class="keyword">this</span>.isError = !<span class="keyword">this</span>.isError;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"styleObj"</span>&gt;</span>测试文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.error</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        styleObj:&#123;</span><br><span class="line">            <span class="string">'active'</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">'error'</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>数组语法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[activeClass,errorClass]"</span>&gt;</span>测试文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.error</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        activeClass: <span class="string">'active'</span>,</span><br><span class="line">        errorClass: <span class="string">'error'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>两者结合</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[&#123;active: isActive&#125;,errorClass]"</span>&gt;</span>测试文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.error</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        isActive: <span class="literal">true</span>,</span><br><span class="line">        errorClass: <span class="string">'error'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>区别</code></p><blockquote><p>对象语法：值为布尔型，表示那个类有没有</p></blockquote><blockquote><p>数组语法：值为字符型，表示那个类是什么</p></blockquote><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><ul><li>v-if</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>啦啦啦<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>v-show</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"show"</span>&gt;</span>啦啦啦<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"!show"</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>区别</code></p><blockquote><p>v-if: 是一种真正意义上的显示隐藏，有就渲染，没有就销毁。适合处理一次渲染的情况</p></blockquote><blockquote><p>v-show：原理是通过设置display来控制显示隐藏，无论有没有，元素都会渲染。适合频繁切换的场合</p></blockquote><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><ul><li>数组列表</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        list: [<span class="string">'元素1'</span>,<span class="string">'元素2'</span>,<span class="string">'元素3'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>对象列表</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(val,key,index) in obj"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;key&#125;&#125;: &#123;&#123;val&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        obj: &#123;</span><br><span class="line">            name: <span class="string">'张三'</span>,</span><br><span class="line">            age: <span class="number">24</span>,</span><br><span class="line">            sex: <span class="string">'男'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>全局组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component-demo</span>&gt;</span><span class="tag">&lt;/<span class="name">component-demo</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'component-demo'</span>,&#123;</span><br><span class="line">    template: <span class="string">'&lt;p&gt;qimai&lt;/p&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>局部组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component-demo</span>&gt;</span><span class="tag">&lt;/<span class="name">component-demo</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> componentDemo = &#123;</span><br><span class="line">    template: <span class="string">'&lt;p&gt;qimai&lt;/p&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">'component-demo'</span>: componentDemo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>带有变量的组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component-demo</span>&gt;</span><span class="tag">&lt;/<span class="name">component-demo</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> componentDemo = &#123;</span><br><span class="line">    template: <span class="string">'&lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;'</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name: <span class="string">'qimai'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">'component-demo'</span>: componentDemo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>能传递变量的组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component-demo</span> <span class="attr">:message</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-demo</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> componentDemo = &#123;</span><br><span class="line">    props: [<span class="string">'message'</span>],</span><br><span class="line">    template: <span class="string">'&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            msg: <span class="string">'qimai'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">'component-demo'</span>: componentDemo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>能触发事件的组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component-demo</span> <span class="attr">:count</span>=<span class="string">"countNum"</span> @<span class="attr">btn-click</span>=<span class="string">"toAdd"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-demo</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> componentDemo = &#123;</span><br><span class="line">    props: [<span class="string">'count'</span>],</span><br><span class="line">    template: <span class="string">'&lt;button @click="clickHandle()"&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;'</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        clickHandle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'btn-click'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            countNum: <span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        toAdd: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            ++<span class="keyword">this</span>.countNum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">'component-demo'</span>: componentDemo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>带有插槽的组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component-demo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>插槽内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>插槽内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component-demo</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> componentDemo = &#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt;内容&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">'component-demo'</span>: componentDemo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>带有具名插槽的组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component-demo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>我是头部<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>我是底部<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component-demo</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> componentDemo = &#123;</span><br><span class="line">    template: <span class="string">'&lt;div class="d"&gt;'</span>+</span><br><span class="line">                    <span class="string">'&lt;slot name="header"&gt;&lt;/slot&gt;'</span>+</span><br><span class="line">                    <span class="string">'&lt;p&gt;别看我，我是内容&lt;/p&gt;'</span>+</span><br><span class="line">                    <span class="string">'&lt;slot name="footer"&gt;&lt;/slot&gt;'</span>+</span><br><span class="line">              <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">'component-demo'</span>: componentDemo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>组件三要素：</p></blockquote><ul><li><code>Prop</code> 允许外部环境传递数据给组件；</li><li><code>事件</code> 允许从组件内触发外部环境的副作用；</li><li><code>插槽</code> 允许外部环境将额外的内容组合在组件中。</li></ul><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;练习vue的demo&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>字典技巧</title>
    <link href="http://yoursite.com/2018/03/29/%E5%AD%97%E5%85%B8%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2018/03/29/字典技巧/</id>
    <published>2018-03-28T16:00:00.000Z</published>
    <updated>2018-03-29T08:01:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>字典技巧</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><blockquote><p>需求：页面标题会随着路由改变而改变</p></blockquote><p>下面简单模拟一下</p><p>实现方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input-box"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inputBox = <span class="built_in">document</span>.querySelector(<span class="string">'.input-box'</span>);</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>);</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span><br><span class="line">    </span><br><span class="line">    btn.onclick = clickHandle;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clickHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> val = inputBox.value;</span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">''</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (val) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                html = <span class="string">'欢迎来到a页面'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                html = <span class="string">'欢迎来到b页面'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">                html = <span class="string">'欢迎来到c页面'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                html = <span class="string">'欢迎访问'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        box.innerHTML = html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>优化方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inputBox = <span class="built_in">document</span>.querySelector(<span class="string">'.input-box'</span>);</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>);</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> db = &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="string">'欢迎来到a页面'</span>,</span><br><span class="line">        <span class="string">'b'</span>: <span class="string">'欢迎来到b页面'</span>,</span><br><span class="line">        <span class="string">'c'</span>: <span class="string">'欢迎来到c页面'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    btn.onclick = clickHandle;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clickHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> val = inputBox.value;</span><br><span class="line">        <span class="keyword">var</span> html = !inputBox.value ? <span class="string">'欢迎访问'</span> : db[val];</span><br><span class="line"></span><br><span class="line">        box.innerHTML = html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>结语：这样改法有什么好处？ 就是为了以后容易修改！</p><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字典技巧&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>reduce</title>
    <link href="http://yoursite.com/2018/03/29/reduce%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/03/29/reduce方法/</id>
    <published>2018-03-28T16:00:00.000Z</published>
    <updated>2018-03-30T03:31:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>API之reduce</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce_clone#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7" target="_blank" rel="noopener">Mozilla</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习API，起码得了解3点</p><ul><li>兼容性</li><li>用法</li><li>使用场合</li></ul><p>下面对这3点简要说明</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><h3 id="PC"><a href="#PC" class="headerlink" title="PC:"></a>PC:</h3><table><thead><tr><th style="text-align:center">Chrome</th><th style="text-align:center">Firefox (Gecko)</th><th style="text-align:center">Internet Explorer</th><th style="text-align:center">Opera</th><th style="text-align:center">Safari</th></tr></thead><tbody><tr><td style="text-align:center">(Yes)</td><td style="text-align:center">3.0 (1.9)</td><td style="text-align:center">9</td><td style="text-align:center">10.5</td><td style="text-align:center">4.0</td></tr></tbody></table><h3 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile:"></a>Mobile:</h3><table><thead><tr><th style="text-align:center">Android</th><th style="text-align:center">Chrome for Android</th><th style="text-align:center">Firefox Mobile (Gecko)</th><th style="text-align:center">Opera Mobile</th><th style="text-align:center">Safari Mobile</th></tr></thead><tbody><tr><td style="text-align:center">(Yes)</td><td style="text-align:center">(Yes)</td><td style="text-align:center">(Yes)</td><td style="text-align:center">(Yes)</td><td style="text-align:center">(Yes) </td></tr></tbody></table><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><blockquote><p>语法：arr.reduce([callback, initialValue])</p></blockquote><p>参数</p><ul><li>callback <ul><li>previousValue 上一次调用函数的返回值，或者是提供的初始值（initialValue）</li><li>currentValue 当前被处理的元素</li><li>currentIndex 当前被处理元素在数组中的索引, 即currentValue的索引.如果有initialValue初始值, 从0开始.如果没有从1开始.</li><li>array 源数组</li></ul></li><li>initialValue 可选参数, 作为第一次调用 callback 的第一个参数。</li></ul><h2 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h2><blockquote><p>数组累加</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.reduce(add,<span class="number">0</span>) <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">pre,cur</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>计算数组重复项</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'v'</span>,<span class="string">'c'</span>,<span class="string">'e'</span>,<span class="string">'e'</span>,<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">var</span> cal = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    a[b] =  a[b] ? ++a[b] : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;,&#123;&#125;)</span><br><span class="line">cal; <span class="comment">//&#123;a: 3, b: 1, c: 2, v: 1, e: 2&#125;</span></span><br></pre></td></tr></table></figure><p>个人总结：理解这个API，首先应着重理解参数 <code>previousValue</code> 和 <code>initialValue</code>。previousValue，函数没执行时，存储的是第一个值，执行后，存储的是函数执行的返回值，即累计处理的值。initialValue，他的意义在于，给个默认值。避免为空。</p><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;API之reduce&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>python识别图片中的文字</title>
    <link href="http://yoursite.com/2017/09/05/python%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/"/>
    <id>http://yoursite.com/2017/09/05/python识别图片中的文字/</id>
    <published>2017-09-05T08:54:29.000Z</published>
    <updated>2019-01-30T08:05:12.251Z</updated>
    
    <content type="html"><![CDATA[<p>关于Python的识别图片中的文字并写入</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h2 id="问题一：安装相关插件"><a href="#问题一：安装相关插件" class="headerlink" title="问题一：安装相关插件"></a>问题一：安装相关插件</h2><h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><blockquote><p>1、curl <a href="https://bootstrap.pypa.io/ez_setup.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/ez_setup.py</a> -o - | sudo python<br>2、sudo easy_install pip</p></blockquote><h3 id="安装-pytesseract"><a href="#安装-pytesseract" class="headerlink" title="安装 pytesseract"></a>安装 pytesseract</h3><blockquote><p>pip install pytesseract</p></blockquote><h3 id="安装-PIL"><a href="#安装-PIL" class="headerlink" title="安装 PIL"></a>安装 PIL</h3><blockquote><p>pip install PIL </p></blockquote><p>如果失败 请尝试  </p><blockquote><p>pip install PILLOW</p></blockquote><h3 id="安装识别引擎-tesseract-ocr"><a href="#安装识别引擎-tesseract-ocr" class="headerlink" title="安装识别引擎 tesseract-ocr"></a>安装识别引擎 tesseract-ocr</h3><blockquote><p>brew install tesseract</p></blockquote><p>识别<code>中文</code>的具体办法：</p><blockquote><p>1、下载 chi_sim.traineddata <a href="https://github.com/tesseract-ocr/tessdata/blob/master/chi_sim.traineddata" target="_blank" rel="noopener">地址</a><br>2、 将文件放在 <code>tessdata</code> 目录下，具体路径 <code>/usr/local/Cellar/tesseract/3.05.01/share/tessdata</code>。<code>小技巧</code>：mac打开路径快捷键: Shift + Command + G </p></blockquote><h2 id="问题二：UnicodeEncodeError"><a href="#问题二：UnicodeEncodeError" class="headerlink" title="问题二：UnicodeEncodeError"></a>问题二：UnicodeEncodeError</h2><p>具体报错提示: UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 0-8: ordinal not in range(128)</p><p>具体原因是，编码方式不对。应该使用 utf-8 编码</p><blockquote><p>f.write(str(text.encode(‘utf-8’)))</p></blockquote><h2 id="问题三：识别不精确"><a href="#问题三：识别不精确" class="headerlink" title="问题三：识别不精确"></a>问题三：识别不精确</h2><p>治标方法：对图像进行二值化，对比度加强等操作</p><p>治本方法：训练它 <a href="http://www.cnblogs.com/wzben/p/5930538.html" target="_blank" rel="noopener">具体方法</a></p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">## -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageEnhance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetImageDate</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(self)</span>:</span></span><br><span class="line">        image = Image.open(<span class="string">'images/t2.jpg'</span>)</span><br><span class="line">        imgry = image.convert(<span class="string">'L'</span>)  <span class="comment">#图像加强，二值化</span></span><br><span class="line">        sharpness =ImageEnhance.Contrast(imgry) <span class="comment">#对比度增强</span></span><br><span class="line">        sharp_img = sharpness.enhance(<span class="number">2.0</span>) <span class="comment">#增强的数值</span></span><br><span class="line">        sharp_img.save(<span class="string">"images/t2sharp.jpg"</span>)</span><br><span class="line">        tessdata_dir_config = <span class="string">'--tessdata-dir "/usr/local/Cellar/tesseract/3.05.01/share/tessdata"'</span></span><br><span class="line">        text = pytesseract.image_to_string(sharp_img,lang=<span class="string">'chi_sim'</span>, config=tessdata_dir_config)</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SaveResultToDocument</span><span class="params">(self)</span>:</span></span><br><span class="line">        text = self.m()</span><br><span class="line">        f = open(<span class="string">"img.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">        <span class="keyword">print</span> text</span><br><span class="line">        f.write(str(text.encode(<span class="string">'utf-8'</span>)))</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">g = GetImageDate()</span><br><span class="line">g.SaveResultToDocument()</span><br></pre></td></tr></table></figure><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Python的识别图片中的文字并写入&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python爬取图片</title>
    <link href="http://yoursite.com/2017/06/01/python%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2017/06/01/python爬取图片/</id>
    <published>2017-06-01T09:00:24.000Z</published>
    <updated>2017-09-11T10:33:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于Python的爬取网站图片示例，基于Python 2.X</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><blockquote><p>完整代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">## -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line">reload(sys)  </span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,position,regX)</span>:</span></span><br><span class="line">self.url = url</span><br><span class="line">self.position = position</span><br><span class="line">self.regX = regX</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_page_info</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">html = urllib.urlopen(self.url).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> html</span><br><span class="line"></span><br><span class="line">pic_url = re.findall(self.regX,html,re.S)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> pic_url:</span><br><span class="line">pic = urllib.urlopen(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> item</span><br><span class="line"><span class="comment"># 文件夹不存在则创建</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(self.position):</span><br><span class="line">os.makedirs(self.position)</span><br><span class="line">fp = open(self.position+str(i)+<span class="string">'.jpg'</span>,<span class="string">'wb'</span>)</span><br><span class="line">fp.write(pic.read())</span><br><span class="line">fp.close()</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.umei.cc/meinvtupian/'</span> </span><br><span class="line">position = <span class="string">'/Users/mengfanxu/self/python/images/'</span> </span><br><span class="line">regX = <span class="string">r'&lt;img src="(.+?\.jpg)" '</span>  </span><br><span class="line"></span><br><span class="line">spider = Spider(url,position,regX)</span><br><span class="line">spider.save_page_info()</span><br></pre></td></tr></table></figure><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Python的爬取网站图片示例，基于Python 2.X&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python爬取数据</title>
    <link href="http://yoursite.com/2017/06/01/python%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2017/06/01/python爬取数据/</id>
    <published>2017-06-01T04:20:14.000Z</published>
    <updated>2017-09-05T08:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css">    p.xu-sub{        width: 100%;        background-color: rgba(51,51,51,.85);        color: rgb(204,204,204);        line-height: 44px;        text-indent: 2em;        text-rendering: optimizeLegibility;    }</style><p>关于Python的爬取网站数据示例，基于Python 2.X</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h2 id="初始踩坑"><a href="#初始踩坑" class="headerlink" title="初始踩坑"></a>初始踩坑</h2><p class="xu-sub">字符串连接</p><p>爬取的网站是index等于不同的数值，有不同的数据。而这个不同的数值就需要循环赋值，从而爬取数据。而连接这个变量则需要<code>类型转换</code>，具体写法:url = ‘<a href="http://mnks.jxedt.com/get_question?r=0.5327507597500334&amp;index=&#39;+str(i)" target="_blank" rel="noopener">http://mnks.jxedt.com/get_question?r=0.5327507597500334&amp;index=&#39;+str(i)</a></p><p class="xu-sub">Python之for循环</p><p>具体写法 <code>for i in range(1,100)</code></p><p class="xu-sub">json格式数据</p><p>具体写法 <code>json.dumps(data).decode(&quot;unicode_escape&quot;)</code></p><p class="xu-sub">中文格式数据</p><p>具体写法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line">reload(sys)  </span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">## -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> fabric.colors <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> fabric.contrib.console <span class="keyword">import</span> confirm</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">maxlen = <span class="number">100</span></span><br><span class="line">data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line">reload(sys)  </span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)  </span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,maxlen):</span><br><span class="line">url = <span class="string">'http://mnks.jxedt.com/get_question?r=0.5327507597500334&amp;index='</span>+str(i)</span><br><span class="line">wp = urllib.urlopen(url)</span><br><span class="line">content = wp.read()</span><br><span class="line">data.append(content)</span><br><span class="line"></span><br><span class="line">fp = open(<span class="string">'data.json'</span>,<span class="string">'wb'</span>)</span><br><span class="line">fp.write(json.dumps(data).decode(<span class="string">"unicode_escape"</span>))</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
    p.xu-sub{
        width: 100%;
        background-color: rgba(51,51,51,.85);
        color: rgb(204,204,204);
        line-height: 44px;
        text-indent: 2em;
        text-rendering: optimizeLegibility;
    }
&lt;/style&gt;

&lt;p&gt;关于Python的爬取网站数据示例，基于Python 2.X&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Fabric" scheme="http://yoursite.com/tags/Fabric/"/>
    
  </entry>
  
  <entry>
    <title>node爬取数据</title>
    <link href="http://yoursite.com/2017/05/24/node%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2017/05/24/node爬取数据/</id>
    <published>2017-05-24T09:58:52.000Z</published>
    <updated>2017-06-01T05:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>初衷是自己想写个网站，无奈没数据，便自己写个“偷数据”的js</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h2 id="初始踩坑"><a href="#初始踩坑" class="headerlink" title="初始踩坑"></a>初始踩坑</h2><p>初始想法是，使用中间件request获取数据，在将数据遍历，用中间件fs的api createWriteStream逐条写入。</p><p>无奈，总是提示错误 write after end</p><p>卒！</p><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request-promise'</span>);</span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">'index.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据条数</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> url;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;num;i++)&#123;</span><br><span class="line">url = <span class="string">'http:www.***.com&amp;index='</span>+i;</span><br><span class="line">request(url).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">arr.push(data);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==(num<span class="number">-1</span>)) resolve(arr);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line">writeStream.write(result.toString(),<span class="string">'UTF8'</span>);</span><br><span class="line">writeStream.on(<span class="string">'finish'</span>,()=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'写入完成'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">writeStream.on(<span class="string">'error'</span>,()=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'写入错误'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">writeStream.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>极其同意网上的一种说法，他其实是假的同步，本质还是异步<br>所以这里使用 if(i==(num-1)) resolve(arr); 来保证数据获取完毕</p><p>简要说明几点</p><blockquote><ul><li>数据传递用的是 resolve ，从而实现了假的同步</li><li>reject用于处理错误</li></ul></blockquote><p>贴个网址 <a href="https://wohugb.gitbooks.io/promise/content/introduction/index.html" target="_blank" rel="noopener">Promise Book</a></p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>注意这个for循环声明循环变量用的是<code>let</code>不是var,这里并不是说var实现不了，而是使用var的话得使用闭包，才能保证程序的正确运行。</p><p>为什么用了let就可以不用闭包呢？</p><p>let声明的变量只在自己的    <code>块级作用域</code>（该作用域是es6新增的）有效。</p><p>那为什么var就不行呢？</p><p>当然，我可以回答，它没有块作用域的概念，只有自己的局部作用域的啦。显然这样回答，肯定会一脸懵逼。。<br>具体原因，这里简要说说，要从for循环讲起，js的for循环有两个作用域，一个外部循环，一个内部表达式。每次循环，从循环出取得值压入栈中，内部的表达式每次执行再从这个栈中获取数值，在进行相应的处理并输出。使用var，如本例这种异步请求（可简单记为 耗时请求），向栈中获取数据只能获取到最后的一个数据，也就只能获取一条数据了，（题外话，这也就是常考的闭包问题）。用了let，循环处就有了自己的<code>块级作用域</code>，而块级作用域只对该块有效，也就是说异步请求中表达式处理的循环变量都是不同块中的值，互不影响，也就有了多条数值。</p><h3 id="writeStream-write"><a href="#writeStream-write" class="headerlink" title="writeStream.write"></a>writeStream.write</h3><p>写入的数据貌似只能是String类型，这里直接传递result,会报错（好坑啊！好坑啊！好坑啊！）,所以要使用toString api使其类型转换。</p><h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><blockquote><ul><li>获取的网址接口必须是类似 http:www.***.com&amp;index=1 这种的。根据index的值累加获取不同数据的。</li><li>获取的数据没按着顺序，感觉应该是异步的原因，暂时未解决。</li></ul></blockquote><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初衷是自己想写个网站，无奈没数据，便自己写个“偷数据”的js&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="node" scheme="http://yoursite.com/categories/node/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>vuex简单使用说明</title>
    <link href="http://yoursite.com/2017/05/12/vuex%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2017/05/12/vuex简单使用说明/</id>
    <published>2017-05-12T02:04:56.000Z</published>
    <updated>2017-05-12T02:55:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>简简单单的vuex学习</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h2 id="基础说明"><a href="#基础说明" class="headerlink" title="基础说明"></a>基础说明</h2><p><a href="https://vuex.vuejs.org/zh-cn/intro.html" target="_blank" rel="noopener">vuex说明网站</a></p><h3 id="官方语言说明"><a href="#官方语言说明" class="headerlink" title="官方语言说明"></a>官方语言说明</h3><p>Vuex 是一个专为 Vue.js应用程序开发的<code>状态管理模式</code>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h3 id="自己总结"><a href="#自己总结" class="headerlink" title="自己总结"></a>自己总结</h3><p>Vuex它有一个库，这个库可以控制<code>全局组件</code>，类似一个管理者，可以管理程序员的工作，也可以管理扫地大妈的工作。它给程序员和扫地大妈分发任务，并可以及时响应他俩的工作情况。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果在模块化构建系统中，请确保在开头调用了 Vue.use(Vuex)</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.commit(<span class="string">'increment'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(store.state.count) <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure><h3 id="自己示例"><a href="#自己示例" class="headerlink" title="自己示例"></a>自己示例</h3><p>示例说明：vuex在vue-cli环境下实现vue-resource的拦截器（控制一个loading动画的显示隐藏）</p><blockquote><p>① 在src文件夹下新建 store 文件夹，并在里面新建index.js</p></blockquote><p>index.js内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line">Vue.use(VueResource);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state: &#123;</span><br><span class="line">      loadingState: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">      showLoading : <span class="function"><span class="params">state</span> =&gt;</span> state.loadingState = <span class="literal">true</span>,</span><br><span class="line">      hiddenLoading : <span class="function"><span class="params">state</span> =&gt;</span> state.loadingState = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>② 修改main.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 添加如下代码 --&gt;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.http.interceptors.push(<span class="function">(<span class="params">request, next</span>) =&gt;</span> &#123;</span><br><span class="line">    store.commit(<span class="string">'showLoading'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求中...'</span>);</span><br><span class="line">    next(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        store.commit(<span class="string">'hiddenLoading'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求结束...'</span>);</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>③ 修改App.vue</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loading</span> <span class="attr">v-show</span>=<span class="string">"loadingShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">loading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> loading <span class="keyword">from</span> <span class="string">"./components/Loading.vue"</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">data()&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">computed: &#123;</span></span><br><span class="line"><span class="undefined">    loadingShow () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.loadingState</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components:&#123;</span></span><br><span class="line"><span class="undefined">  loading</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h4><ul><li>index.js 用于<code>全局状态管理</code> 。<code>state</code> 设定初始状态，<code>mutations</code> 设定状态变化,可以用store.commit()来触发</li><li>main.js 用于导入store,导入后其他.vue文件就可以用<code>this.$store</code>来控制状态了。并设置数据请求时Loading动画的显示和隐藏</li><li>App.vue 导入Loading动画组件，并用计算属性控制组件的显示隐藏</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>需在main.js中的new Vue中导入 store</li><li>状态写在data()里面是不起作用的，必须用<code>计算属性</code>来控制</li><li>有些事物分开理解，你可能会豁然开朗</li></ul><h3 id="总结说明"><a href="#总结说明" class="headerlink" title="总结说明"></a>总结说明</h3><p>主体思路是，新建个库(store)，用于存储状态和响应状态变化，借此控制全局组件。其他组件想要它来控制，则需在主文件(main.js)中导入。便可以轻松的切换状态(this.$store.commit())</p><p>友情提示，点击下面链接，切换到vuex分支查看代码</p><p><a href="https://github.com/mfx55/driving-test" target="_blank" rel="noopener">你点和不点，我都在这里</a></p><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简简单单的vuex学习&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="vuex" scheme="http://yoursite.com/categories/vuex/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>node-express结合vue-cli开发之初始环境搭建</title>
    <link href="http://yoursite.com/2017/05/09/node-express%E7%BB%93%E5%90%88vue-cli%E5%BC%80%E5%8F%91%E4%B9%8B%E5%88%9D%E5%A7%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/05/09/node-express结合vue-cli开发之初始环境搭建/</id>
    <published>2017-05-09T03:05:20.000Z</published>
    <updated>2017-05-09T07:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css">    p.xu-sub{        width: 100%;        background-color: rgba(51,51,51,.85);        color: rgb(204,204,204);        line-height: 44px;        text-indent: 2em;        text-rendering: optimizeLegibility;    }</style><p>node-express结合vue-cli开发之初始环境搭建</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>node-express是<code>后台框架</code>，vue-cli是<code>前台</code>框架，所以分开写更好</p><p>如图,back-end为后台文件夹，front-end为前台文件夹</p><p><img src="http://oo6bpvt6y.bkt.clouddn.com/WX20170509-110908.png" alt="text"></p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="安装express"><a href="#安装express" class="headerlink" title="安装express"></a>安装express</h3><p class="xu-sub">npm install -g express-generator</p><p class="xu-sub">express –view ejs</p><p class="xu-sub">npm install</p><h3 id="修改-app-js"><a href="#修改-app-js" class="headerlink" title="修改 app.js"></a>修改 app.js</h3><p class="xu-sub">设置跨域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跨域支持</span></span><br><span class="line">app.all(<span class="string">'*'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild'</span>);</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT, POST, GET, DELETE, OPTIONS'</span>);</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p class="xu-sub">修改静态目录</p><blockquote><p>app.use(express.static(path.join(__dirname, ‘../front-end’)));</p></blockquote><p>目的，将文件目录导向前端的index.html上</p><h3 id="创建connection-js"><a href="#创建connection-js" class="headerlink" title="创建connection.js"></a>创建connection.js</h3><p class="xu-sub">连接封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">"mysql"</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns &#123;Connection&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> conn = mysql.createConnection(&#123;</span><br><span class="line">        host: <span class="string">"localhost"</span>,</span><br><span class="line">        user: <span class="string">"root"</span>,</span><br><span class="line">        password: <span class="string">""</span>,</span><br><span class="line">        database: <span class="string">"test"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    conn.oConnect = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            conn.connect(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                    resolve(conn);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    conn.oQuery = <span class="function"><span class="keyword">function</span> (<span class="params">sql, values</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            conn.query(sql, values, <span class="function"><span class="keyword">function</span> (<span class="params">err, rows</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                    resolve(rows);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> conn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我的node版本低,所以使用严格模式</p><h3 id="设置路由，创建接口"><a href="#设置路由，创建接口" class="headerlink" title="设置路由，创建接口"></a>设置路由，创建接口</h3><p class="xu-sub">借口封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> connection = <span class="built_in">require</span>(<span class="string">'../sources/connection'</span>);</span><br><span class="line"><span class="comment">/* GET users listing. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">'/con'</span>,(req,res,next)=&gt;&#123;</span><br><span class="line"><span class="keyword">let</span> conn = connection();</span><br><span class="line">conn.oConnect().then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> conn.oQuery(<span class="string">'SELECT * FROM users'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">rows</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rows.length) res.json(&#123;<span class="attr">data</span>:rows&#125;);</span><br><span class="line">conn.end();</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">res.json(&#123;<span class="attr">data</span>:error&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><h4 id="安装-mysql-中间件"><a href="#安装-mysql-中间件" class="headerlink" title="安装 mysql 中间件"></a>安装 mysql 中间件</h4><blockquote><p>npm install mysql –save</p></blockquote><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="http://oo6bpvt6y.bkt.clouddn.com/WX20170509-140645.png" alt=""></p><h4 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h4><p class="xu-sub">cd back-end</p><p class="xu-sub">node bin/www</p><p>这里可以在app.js添加一行代码 console.log(‘success’); 便可出现链接成功的提示</p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h3><p class="xu-sub">npm install -g vue-cli</p><br><p class="xu-sub">vue init webpack 项目名</p><blockquote><p>执行命令后会有好多选项，开始选项直接敲回车即可，毕竟练习，route选择y，其他n，毕竟练习</p></blockquote><h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="http://oo6bpvt6y.bkt.clouddn.com/WX20170509-142751.png" alt=""></p><h3 id="各个目录说明"><a href="#各个目录说明" class="headerlink" title="各个目录说明"></a>各个目录说明</h3><p><a href="https://juejin.im/entry/58f48484da2f60005d3cb46c" target="_blank" rel="noopener">点我，点我，点我</a></p><h3 id="index-vue-示例"><a href="#index-vue-示例" class="headerlink" title="index.vue 示例"></a>index.vue 示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'hello'</span>,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">'点我看数据'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods:&#123;</span></span><br><span class="line"><span class="javascript">    show:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$http</span></span><br><span class="line"><span class="javascript">          .post(<span class="string">'http://localhost:3000/users/con'</span>)</span></span><br><span class="line"><span class="javascript">          .then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(result.data);</span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里有个应用vue-resource的问题<br>具体引入在src文件夹下main.js中引入，如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span> </span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(VueResource);</span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ul><li>import VueResource from ‘vue-resource’ </li><li>Vue.use(VueResource);</li></ul></blockquote><h3 id="执行-npm-run-dev"><a href="#执行-npm-run-dev" class="headerlink" title="执行 npm run dev"></a>执行 npm run dev</h3><p>会自动用 <a href="http://localhost:8080/#/" target="_blank" rel="noopener">localhost:8080</a> 打开</p><p>如图</p><p><img src="http://oo6bpvt6y.bkt.clouddn.com/WX20170509-143558.png" alt=""></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/MySql/index.html" target="_blank" rel="noopener">传送门</a></p><h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><blockquote><ul><li>数据库名 test</li><li>表名 users</li><li>三个字段 id(int),name(varchar len:128),pwd(varchar len:128)</li></ul></blockquote><p>我用的sequel pro客户端(mac)</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>主题思路是，把前后端分开处理，前端利用跨域去请求后端数据，从而渲染到页面</p></blockquote><blockquote><p>打开 <a href="https://github.com/mfx55/driving-test" target="_blank" rel="noopener">https://github.com/mfx55/driving-test</a> 切换到test分支即可查看所有代码</p></blockquote><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
    p.xu-sub{
        width: 100%;
        background-color: rgba(51,51,51,.85);
        color: rgb(204,204,204);
        line-height: 44px;
        text-indent: 2em;
        text-rendering: optimizeLegibility;
    }
&lt;/style&gt;

&lt;p&gt;node-express结合vue-cli开发之初始环境搭建&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>从客户端看git命令</title>
    <link href="http://yoursite.com/2017/04/28/%E4%BB%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9C%8Bgit%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/04/28/从客户端看git命令/</id>
    <published>2017-04-28T05:41:17.000Z</published>
    <updated>2017-04-28T08:27:14.000Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css">    p.xu-sub{        width: 100%;        background-color: rgba(51,51,51,.85);        color: rgb(204,204,204);        line-height: 44px;        text-indent: 2em;        text-rendering: optimizeLegibility;    }</style><p>该博文以sourceTree软件为例子，根据相关操作，来看git 命令</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h2 id="sourceTree页面"><a href="#sourceTree页面" class="headerlink" title="sourceTree页面"></a>sourceTree页面</h2><p><img height="340px" src="http://oo6bpvt6y.bkt.clouddn.com/WX20170428-134734.png" alt=""></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p class="xu-sub">git add “文件名” 或 git add * </p><p class="xu-sub">git commit -m “代码提交信息” </p><ul><li>提交的目的地是本地仓库<code>（注意这里还没提交到远端）</code></li></ul><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><p class="xu-sub">git pull [远端分支或仓库名字] [本地分支或仓库名字]</p><ul><li>每次切换机器，你应该想到先执行这个命令，在进行后续操作</li></ul><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><p class="xu-sub">git push [远端分支或仓库名字] [本地分支或仓库名字]</p><ul><li>命令 git push origin test:master 提交本地test分支作为远程的master分支，没有会自动创建</li><li>命令 git push origin test:test 提交本地test分支作为远程的test分支</li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p class="xu-sub">git branch</p><p class="xu-sub">git checkout</p><ul><li>命令 git branch 查看本地分支</li><li>命令 git branch -r 查看远程分支</li><li>命令 git branch [name] 创建本地分支 在执行git push origin [远端分支名]:[本地分支名],即可将本地分支提交到远端</li><li>命令 git checkout [name] 切换分支</li><li>命令 git checkout -b [name] 创建新分支并立即切换到新分支</li><li>命令  git branch -d [name]  删除一个<code>合并过</code>的分支，强制删除 -D</li></ul><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p class="xu-sub">git merge</p><ul><li>命令 git merge [name]  将名称为[name]的分支与当前分支合并</li></ul><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
    p.xu-sub{
        width: 100%;
        background-color: rgba(51,51,51,.85);
        color: rgb(204,204,204);
        line-height: 44px;
        text-indent: 2em;
        text-rendering: optimizeLegibility;
    }
&lt;/style&gt;

&lt;p&gt;该博文以sourceTree软件为例子，根据相关操作，来看git 命令&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>css3轨迹动画</title>
    <link href="http://yoursite.com/2017/04/25/css3%E8%BD%A8%E8%BF%B9%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2017/04/25/css3轨迹动画/</id>
    <published>2017-04-25T02:43:21.000Z</published>
    <updated>2017-04-25T02:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>css轨迹动画</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><p></p><p data-height="230" data-theme-id="7928" data-slug-hash="MmjZOb" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/codingxu/pen/MmjZOb" target="_blank" rel="noopener">MmjZOb</a> by TimNew (<a href="http://codepen.io/timnew" target="_blank" rel="noopener">@timnew</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//codepen.io/assets/embed/ei.js"></script><h2 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h2><ul><li>利用伪类，伪类中存放数据</li><li>二维中，x轴和y轴共同促进元素运动，从而形成轨迹动画</li><li>动画过程中，x轴动画靠父类实现，y轴动画靠伪类实现</li></ul><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css轨迹动画&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>git从建库到提交</title>
    <link href="http://yoursite.com/2017/04/24/git%E5%BB%BA%E5%BA%93%E3%80%81%E4%BF%AE%E6%94%B9%E3%80%81%E6%8F%90%E4%BA%A4/"/>
    <id>http://yoursite.com/2017/04/24/git建库、修改、提交/</id>
    <published>2017-04-24T05:44:48.000Z</published>
    <updated>2019-01-29T06:41:59.286Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css">    p.xu-sub{        width: 100%;        background-color: rgba(51,51,51,.85);        color: rgb(204,204,204);        line-height: 44px;        text-indent: 2em;        text-rendering: optimizeLegibility;    }</style><p>初次建立git仓库的流程，这里简单几下，方便以后查看</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h2 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h2><p class="xu-sub">打开GitHub网站 <a href="https://github.com" target="_blank" rel="noopener">github.com</a> 登录自己的账号 如图执行一些步骤</p><p><code>注：图片可以点击放大查看</code></p><p><img height="200px" src="http://oo6bpvt6y.bkt.clouddn.com/WX20170424-135608.png"><br><img height="185px" src="http://oo6bpvt6y.bkt.clouddn.com/WX20170424-134820.png"><br><img height="260px" src="http://oo6bpvt6y.bkt.clouddn.com/WX20170424-134914.png"></p><p class="xu-sub">打开GitHub上新建的库,会看到一些命令行信息</p><p><img height="200px" src="http://oo6bpvt6y.bkt.clouddn.com/WX20170424-141840%20%281%29.png"></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p class="xu-sub">打开命令行工具</p><ul><li><code>从远端克隆到本地</code> git clone <a href="https://github.com/mfx55/test.git" target="_blank" rel="noopener">https://github.com/mfx55/test.git</a>                 </li><li><code>打开test文件夹</code> cd test                                                     </li><li><code>移除默认分支</code> git remote rm origin                                         </li><li><code>创建连接</code> git remote add origin <a href="https://github.com/mfx55/test.git" target="_blank" rel="noopener">https://github.com/mfx55/test.git</a>     </li><li><code>放入文件</code> 用编译器打开test文件，把自己的项目丢进去</li><li><code>填写提交说明</code> git commit -m ‘注释信息’                                     </li><li><code>将本地项目推送到远端</code> git push origin master </li></ul><p></p><p class="xu-sub">大功告成</p><br><img src="http://oo6bpvt6y.bkt.clouddn.com/WX20170424-145003%20%281%29.png" alt="">                                    <p></p><h2 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h2><ul><li>可以使用命令行添加个 .gitignore（忽略文件） README.md (项目说明)</li><li>.gitignore 格式参考 <a href="https://github.com/mfx55/bishe/blob/master/.gitignore" target="_blank" rel="noopener">.girignore.com</a></li><li>README.md 他是采用的markdown语法写的，看后缀也知道了。。</li></ul><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
    p.xu-sub{
        width: 100%;
        background-color: rgba(51,51,51,.85);
        color: rgb(204,204,204);
        line-height: 44px;
        text-indent: 2em;
        text-rendering: optimizeLegibility;
    }
&lt;/style&gt;

&lt;p&gt;初次建立git仓库的流程，这里简单几下，方便以后查看&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>链式写法</title>
    <link href="http://yoursite.com/2017/04/18/%E9%93%BE%E5%BC%8F%E5%86%99%E6%B3%95/"/>
    <id>http://yoursite.com/2017/04/18/链式写法/</id>
    <published>2017-04-18T10:34:07.000Z</published>
    <updated>2017-04-18T10:59:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>函数式编程</p><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><h2 id="一般写法"><a href="#一般写法" class="headerlink" title="一般写法"></a>一般写法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">520</span> - <span class="number">11</span> + <span class="number">520</span> - <span class="number">1</span>); <span class="comment">// 1028</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sub(sum(sub(<span class="number">520</span>,<span class="number">11</span>),<span class="number">520</span>),<span class="number">1</span>)); <span class="comment">// 1028</span></span><br></pre></td></tr></table></figure><p>缺点很明显嘛</p><ul><li>难看的要死</li><li>写起来也贼不舒服</li><li>极容易出错</li></ul><h2 id="链式写法"><a href="#链式写法" class="headerlink" title="链式写法"></a>链式写法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chain = &#123;</span><br><span class="line">    setValue: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._temp = a;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    sum: <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._temp += b;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    sub: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._temp -= c;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    getValue: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(chain.setValue(<span class="number">520</span>).sub(<span class="number">11</span>).sum(<span class="number">520</span>).sub(<span class="number">1</span>).getValue()); <span class="comment">// 1028</span></span><br></pre></td></tr></table></figure><h3 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h3><p>这种链式的写法，重点在于他用了个<code>对象</code>，每次的操作到返回到这个<code>对象</code>上，从而进行下一步操作。</p><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数式编程&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="函数式编程" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
